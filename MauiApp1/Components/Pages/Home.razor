@page "/"
<div class="container">
    <div class="mainTimer">
        <div class="timerText">
            <h1 class="currentTime"> @currentTime</h1>
            <p> Record: @record</p>
        </div>
        <button class="addBtn" @onclick="addSplit"><img src="Buttons/add-circle-svgrepo-com.svg" /></button>
    </div>

    <div class="loop">
        @if (splitsList.Count == 0)
        {
            <p><em>No splits</em></p>
        }
        else
        {
            <div class ="allSplits">
                @foreach (var split in splitsList)
                {
                    <div class="split">
                        <h6 class="splitName">@split.Name</h6>
                        <div class="splitInfo">
                            <p>@split.Record</p>
                            <button class="btnDeleteSplit" @onclick="() => deleteSplit(split.Index)"><img src="Buttons/close-circle-svgrepo-com.svg" /></button>
                            <div class="pad"></div>
                            @if (@split.Time != "")
                            {
                                <p class="runTime">@split.Time</p>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<div class="buttons">
    <button class="btnItem" @onclick="startTimer"><img src="Buttons/play-1001-svgrepo-com.svg"/></button>
    <button class="btnItem" @onclick="stopTimer"><img src="Buttons/pause-1010-svgrepo-com.svg" /></button>
    <button class="btnItem" @onclick="() => restartTimer(false)"><img src="Buttons/restart-svgrepo-com.svg" /></button>
    <button class="btnItem" @onclick="finish"><img src="Buttons/finish-line-103-svgrepo-com.svg" /></button>
    <button class="btnItem" @onclick="resetRecord"><img src="Buttons/delete-file-svgrepo-com.svg" /></button>
    <button class="btnItem" @onclick="splitTimer"><img src="Buttons/split-v-svgrepo-com.svg" /></button>
</div>


@code {
    private Stopwatch stopwatch = new Stopwatch();
    private string currentTime = "00:00:00:00";
    private string record = Preferences.Default.Get<string>("record1", "None");
    private System.Timers.Timer aTimer = new System.Timers.Timer(10);


    private List<Split> splitsList = loadDatabase();
    private int splitIndex;
    private int nextSplit = 0;

    private void startTimer()
    {
        aTimer.Elapsed += new System.Timers.ElapsedEventHandler(timerElapsed);
        aTimer.AutoReset = true;
        aTimer.Enabled = true;

        stopwatch.Start();
    }

    private async void timerElapsed(Object? source, System.Timers.ElapsedEventArgs e)
    {
        currentTime = stopwatch.Elapsed.ToString(@"hh\:mm\:ss\.ff");
        await InvokeAsync(StateHasChanged);
    }

    private void stopTimer()
    {
        stopwatch.Stop();
    }

    private void restartTimer(bool newRecord)
    {
        stopwatch.Reset();
        currentTime = "00:00:00:00";
        nextSplit = 0;
        if (newRecord)
        {
            deleteDatabase();
        }
        for (int i = 0; i < splitsList.Count; i++)
        {
            if (newRecord && splitsList[i].Time != "")
            {
                splitsList[i].Record = splitsList[i].Time;
            }
            splitsList[i].Time = "";
            if (newRecord)
            {
                saveDatabase(splitsList[i]);
            }
        }
    }

    private void finish()
    {
        if (record == "None" || TimeSpan.ParseExact(currentTime, "hh\\:mm\\:ss\\.ff", System.Globalization.CultureInfo.InvariantCulture) < TimeSpan.ParseExact(record, "hh\\:mm\\:ss\\.ff", System.Globalization.CultureInfo.InvariantCulture))
        {
            record = currentTime;
            Preferences.Default.Set("record1", record);
            restartTimer(true);
        }
        else
        {
            restartTimer(false);
        }
    }

    private void resetRecord()
    {
        record = "None";
        Preferences.Default.Set("record1", record);
    }

    private async void addSplit()
    {
        string name = await App.Current.MainPage.DisplayPromptAsync("New Split", "Enter name:");

        if (name!= null)
        {
            if (string.IsNullOrWhiteSpace(name))
            {
                name = "New Split";
            }
            Split split = new Split
                {
                    Index = splitsList.Count,
                    Time = "",
                    Record = "None",
                    Name = name
                };

            splitsList.Add(split);
            saveDatabase(split);
            await InvokeAsync(StateHasChanged);
        }   
    }

    private void splitTimer()
    {
        if (nextSplit < splitsList.Count)
        {
            string time = stopwatch.Elapsed.ToString(@"hh\:mm\:ss\.ff");
            splitsList[nextSplit].Time = time;        

            nextSplit++;
        }
    }

    private void deleteSplit(int index)
    {
        splitsList.RemoveAt(index);
        deleteDatabase();
        for (int i = 0; i < splitsList.Count; i++)
        {
            splitsList[i].Index = i;
            saveDatabase(splitsList[i]);
        }
    }

    [Table("split")]
    public class Split
    {
        [PrimaryKey]
        [Column("index")]
        public int Index { get; set; }

        [Column("time")]
        public string? Time { get; set; }

        [Column("record")]
        public string? Record { get; set; }

        [Column("name")]
        public string? Name { get; set; }
    }

    private void saveDatabase(Split split)
    {
        App.SplitDatabase.Add(split);
    }

    private static List<Split> loadDatabase()
    {
        return App.SplitDatabase.GetSplits();
    }

    private void deleteDatabase()
    {
        App.SplitDatabase.Delete();

    }
}